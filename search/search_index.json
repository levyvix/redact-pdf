{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"redact-pdf","text":"<p>Redact a phrase off a pdf file</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install redact-pdf\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Use the project in a python file</p> <pre><code>from redact_pdf.redact import TextRedactor\n\nfrom pathlib import Path\n\npdf_file = Path(__file__).parent / \"pdf_test.pdf\"\nsave_path = Path(__file__).parent / \"pdf_test_redacted.pdf\"\n\ntr = TextRedactor()\ntr.redact_text(\n    file_path=pdf_file,\n    text_to_redact=\"XXX\",\n    output_file_name=save_path,\n)\n</code></pre> <p>This will result in a .pdf file called <code>pdf_test_redacted.pdf</code> with the phrase <code>XXX</code> removed from every page.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#redact_pdf.redact.TextRedactor","title":"<code>TextRedactor</code>","text":"<p>Redact a text from a pdf file</p> <p>Methods:</p> <ul> <li> <p>redact_text(file_path: Path, text_to_redact: str, output_file_name:Path) -&gt; bool</p> </li> <li> <p>redact_all_files_in_dir(base_path: Path, text_to_redact: str, output_file_suffix: str) -&gt; None</p> </li> </ul> Source code in <code>redact_pdf/redact.py</code> <pre><code>class TextRedactor:\n    \"\"\"Redact a text from a pdf file\n\n    Methods:\n\n    - redact_text(file_path: Path, text_to_redact: str, output_file_name:Path) -&gt; bool\n\n    - redact_all_files_in_dir(base_path: Path, text_to_redact: str, output_file_suffix: str) -&gt; None\n    \"\"\"\n\n    def redact_text(self, file_path: Path, text_to_redact: str, output_file_name: Path) -&gt; bool:\n        \"\"\"Open the document and redact the text\n\n        Args:\n            file_path (Path): PDF file path.\n            text_to_redact (str): Text or phrase to be redacted in every page of pdf file.\n            output_file_name (Path): PDF file name (include .pdf) to be saved after redact.\n\n        Returns:\n            bool: If successfully redacts the text in pdf\n\n        Examples:\n            &gt;&gt;&gt; from redact_pdf.redact import TextRedactor\n            &gt;&gt;&gt; tr = TextRedactor()\n            &gt;&gt;&gt; pdf_file = Path(\"path/to/input.pdf\")\n            &gt;&gt;&gt; TEXT_TO_REDACT = \"Confidential\"\n            &gt;&gt;&gt; save_path = Path(\"path/to/output.pdf\")\n            &gt;&gt;&gt; tr.redact_text(file_path=pdf_file, text_to_redact=TEXT_TO_REDACT, output_file_name=save_path)\n        \"\"\"\n        doc = None\n        try:\n            logger.info(\"Opening file...\")\n            doc = fitz.open(file_path)\n            redacted = False\n            logger.success(\"File Opened.\")\n\n            for i in range(doc.page_count):\n                logger.info(\"Checking page {}\", i + 1)\n                page = doc.load_page(i)\n                redaction_list = page.search_for(text_to_redact, quads=True)\n\n                if redaction_list:  # Ensure results were found before proceeding\n                    logger.info(\"Found text at page {}\", i + 1)\n                    redacted = True\n                    for redact_area in redaction_list:\n                        page.add_redact_annot(redact_area)\n                        page.apply_redactions()  # Apply redactions\n                    logger.success(\"Applied Redactions.\")\n\n            if redacted:\n                logger.info(\"Saving file...\")\n                doc.save(output_file_name, compression_effort=5)\n                logger.info(f\"Successfully redacted and saved: {output_file_name}\")\n\n                return True\n            else:\n                logger.info(f\"No text found to redact in: {file_path}\")\n                return False\n        except Exception as e:\n            logger.error(f\"Error processing {file_path}: {e}\")\n            return False\n        finally:\n            if doc is not None:\n                doc.close()\n\n    def redact_all_files_in_dir(self, base_path: Path, text_to_redact: str, output_file_suffix: str) -&gt; None:\n        \"\"\"Redact all files in a local directory\n\n        Args:\n            base_path (Path): Base directory to find all *.pdf files (recursively)\n            text_to_redact (str): Text or phrase to be redacted in every page of pdf file.\n            output_file_suffix (Path): Suffix to append to original file name to be saved.\n\n        Returns:\n            None\n\n        Examples:\n            &gt;&gt;&gt; from redact_pdf.redact import TextRedactor\n            &gt;&gt;&gt; tr = TextRedactor()\n            &gt;&gt;&gt; base_path = Path(\"path/to/files/\")\n            &gt;&gt;&gt; TEXT_TO_REDACT = \"Confidential\"\n            &gt;&gt;&gt; suffix = \"redacted\"\n            &gt;&gt;&gt; tr.redact_all_files_in_dir(base_path=base_path, text_to_redact=TEXT_TO_REDACT, output_file_suffix=suffix)\n        \"\"\"\n        processed_count = 0\n        error_count = 0\n        try:\n            for file in base_path.rglob(\"*.pdf\"):\n                try:\n                    file_stem = file.stem\n                    result = self.redact_text(\n                        file, text_to_redact, file.with_name(file_stem + f\"_{output_file_suffix}.pdf\")\n                    )\n                    if result:\n                        processed_count += 1\n                except Exception as e:\n                    logger.error(f\"Failed to process {file}: {e}\")\n                    error_count += 1\n\n            logger.info(f\"Processing complete. Successfully processed: {processed_count}, Errors: {error_count}\")\n\n        except Exception as e:\n            logger.error(f\"Fatal error during processing: {e}\")\n</code></pre>"},{"location":"reference/#redact_pdf.redact.TextRedactor.redact_all_files_in_dir","title":"<code>redact_all_files_in_dir(base_path, text_to_redact, output_file_suffix)</code>","text":"<p>Redact all files in a local directory</p> <p>Parameters:</p> Name Type Description Default <code>base_path</code> <code>Path</code> <p>Base directory to find all *.pdf files (recursively)</p> required <code>text_to_redact</code> <code>str</code> <p>Text or phrase to be redacted in every page of pdf file.</p> required <code>output_file_suffix</code> <code>Path</code> <p>Suffix to append to original file name to be saved.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from redact_pdf.redact import TextRedactor\n&gt;&gt;&gt; tr = TextRedactor()\n&gt;&gt;&gt; base_path = Path(\"path/to/files/\")\n&gt;&gt;&gt; TEXT_TO_REDACT = \"Confidential\"\n&gt;&gt;&gt; suffix = \"redacted\"\n&gt;&gt;&gt; tr.redact_all_files_in_dir(base_path=base_path, text_to_redact=TEXT_TO_REDACT, output_file_suffix=suffix)\n</code></pre> Source code in <code>redact_pdf/redact.py</code> <pre><code>def redact_all_files_in_dir(self, base_path: Path, text_to_redact: str, output_file_suffix: str) -&gt; None:\n    \"\"\"Redact all files in a local directory\n\n    Args:\n        base_path (Path): Base directory to find all *.pdf files (recursively)\n        text_to_redact (str): Text or phrase to be redacted in every page of pdf file.\n        output_file_suffix (Path): Suffix to append to original file name to be saved.\n\n    Returns:\n        None\n\n    Examples:\n        &gt;&gt;&gt; from redact_pdf.redact import TextRedactor\n        &gt;&gt;&gt; tr = TextRedactor()\n        &gt;&gt;&gt; base_path = Path(\"path/to/files/\")\n        &gt;&gt;&gt; TEXT_TO_REDACT = \"Confidential\"\n        &gt;&gt;&gt; suffix = \"redacted\"\n        &gt;&gt;&gt; tr.redact_all_files_in_dir(base_path=base_path, text_to_redact=TEXT_TO_REDACT, output_file_suffix=suffix)\n    \"\"\"\n    processed_count = 0\n    error_count = 0\n    try:\n        for file in base_path.rglob(\"*.pdf\"):\n            try:\n                file_stem = file.stem\n                result = self.redact_text(\n                    file, text_to_redact, file.with_name(file_stem + f\"_{output_file_suffix}.pdf\")\n                )\n                if result:\n                    processed_count += 1\n            except Exception as e:\n                logger.error(f\"Failed to process {file}: {e}\")\n                error_count += 1\n\n        logger.info(f\"Processing complete. Successfully processed: {processed_count}, Errors: {error_count}\")\n\n    except Exception as e:\n        logger.error(f\"Fatal error during processing: {e}\")\n</code></pre>"},{"location":"reference/#redact_pdf.redact.TextRedactor.redact_text","title":"<code>redact_text(file_path, text_to_redact, output_file_name)</code>","text":"<p>Open the document and redact the text</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>PDF file path.</p> required <code>text_to_redact</code> <code>str</code> <p>Text or phrase to be redacted in every page of pdf file.</p> required <code>output_file_name</code> <code>Path</code> <p>PDF file name (include .pdf) to be saved after redact.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>If successfully redacts the text in pdf</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from redact_pdf.redact import TextRedactor\n&gt;&gt;&gt; tr = TextRedactor()\n&gt;&gt;&gt; pdf_file = Path(\"path/to/input.pdf\")\n&gt;&gt;&gt; TEXT_TO_REDACT = \"Confidential\"\n&gt;&gt;&gt; save_path = Path(\"path/to/output.pdf\")\n&gt;&gt;&gt; tr.redact_text(file_path=pdf_file, text_to_redact=TEXT_TO_REDACT, output_file_name=save_path)\n</code></pre> Source code in <code>redact_pdf/redact.py</code> <pre><code>def redact_text(self, file_path: Path, text_to_redact: str, output_file_name: Path) -&gt; bool:\n    \"\"\"Open the document and redact the text\n\n    Args:\n        file_path (Path): PDF file path.\n        text_to_redact (str): Text or phrase to be redacted in every page of pdf file.\n        output_file_name (Path): PDF file name (include .pdf) to be saved after redact.\n\n    Returns:\n        bool: If successfully redacts the text in pdf\n\n    Examples:\n        &gt;&gt;&gt; from redact_pdf.redact import TextRedactor\n        &gt;&gt;&gt; tr = TextRedactor()\n        &gt;&gt;&gt; pdf_file = Path(\"path/to/input.pdf\")\n        &gt;&gt;&gt; TEXT_TO_REDACT = \"Confidential\"\n        &gt;&gt;&gt; save_path = Path(\"path/to/output.pdf\")\n        &gt;&gt;&gt; tr.redact_text(file_path=pdf_file, text_to_redact=TEXT_TO_REDACT, output_file_name=save_path)\n    \"\"\"\n    doc = None\n    try:\n        logger.info(\"Opening file...\")\n        doc = fitz.open(file_path)\n        redacted = False\n        logger.success(\"File Opened.\")\n\n        for i in range(doc.page_count):\n            logger.info(\"Checking page {}\", i + 1)\n            page = doc.load_page(i)\n            redaction_list = page.search_for(text_to_redact, quads=True)\n\n            if redaction_list:  # Ensure results were found before proceeding\n                logger.info(\"Found text at page {}\", i + 1)\n                redacted = True\n                for redact_area in redaction_list:\n                    page.add_redact_annot(redact_area)\n                    page.apply_redactions()  # Apply redactions\n                logger.success(\"Applied Redactions.\")\n\n        if redacted:\n            logger.info(\"Saving file...\")\n            doc.save(output_file_name, compression_effort=5)\n            logger.info(f\"Successfully redacted and saved: {output_file_name}\")\n\n            return True\n        else:\n            logger.info(f\"No text found to redact in: {file_path}\")\n            return False\n    except Exception as e:\n        logger.error(f\"Error processing {file_path}: {e}\")\n        return False\n    finally:\n        if doc is not None:\n            doc.close()\n</code></pre>"}]}